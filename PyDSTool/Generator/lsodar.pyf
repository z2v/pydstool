! vim:set ft=fortran:
python module lsodar__user__routines
    interface lsodar_user_interface
       subroutine f(n, t, y, ydot)
         integer intent(hide) :: n
         double precision intent(in) :: t
         double precision dimension(n),intent(in,c)  :: y
         double precision dimension(n),intent(out,c) :: ydot
       end subroutine f
       subroutine jac(n, t, y, ml ,mu, pd, nrowpd)
         integer intent(hide) :: n
         double precision :: t
         double precision dimension(n),intent(c,in) :: y
         integer intent(hide) :: ml,mu
         integer intent(hide) :: nrowpd
         double precision intent(out) :: pd(nrowpd, n)
       end subroutine jac
       subroutine g(n, t, y, ng, gout)
         integer intent(hide) :: n
         double precision intent(in) :: t
         double precision dimension(n),intent(in,c) :: y
         integer intent(hide) :: ng
         double precision dimension(ng),intent(out,c) :: gout
       end subroutine g
    end interface lsodar_user_interface
end python module lsodar__user__routines

python module _lsodar
    interface
        subroutine dlsodar(f,jac,neq,y,t,tout,itol,rtol,atol,itask,istate,iopt,rwork,lrw,iwork,liw,jt,g,ng,jroot)
            callstatement (*f2py_func)(cb_f_in_lsodar__user__routines,&neq,y,&t,&tout,&itol,rtol,atol,&itask,&istate,&iopt,rwork,&lrw,iwork,&liw,cb_jac_in_lsodar__user__routines, &jt,cb_g_in_lsodar__user__routines,&ng,jroot)
            use lsodar__user__routines
            external f
            external jac
            external g

            integer intent(hide),depend(y) :: neq = len(y)
            double precision dimension(neq),intent(in,out,overwrite) :: y
            double precision intent(in,out):: t
            double precision intent(in):: tout
            integer intent(hide),depend(atol) :: itol = (len(atol)<=1 && len(rtol)<=1?1:(len(rtol)<=1?2:(len(atol)<=1?3:4)))
            double precision dimension(*),intent(in),check(len(atol)<&
                &=1||len(atol)>=neq),depend(neq) :: atol
            double precision dimension(*),intent(in),check(len(rtol)<&
                &=1||len(rtol)>=neq),depend(neq) :: rtol
            integer intent(in) :: itask
            integer intent(in,out),check(istate>0 && istate<4) :: istate
            integer intent(hide) :: iopt = 0
            double precision dimension(lrw),intent(in,cache) :: rwork
            integer intent(hide),check(len(rwork)>=lrw),depend(rwork) :: lrw=len(rwork)
            integer dimension(liw),intent(in,cache) :: iwork
            integer intent(hide),check(len(iwork)>=liw),depend(iwork) :: liw=len(iwork)
            integer intent(in) :: jt

            integer intent(in) :: ng
            integer intent(out), dimension(MAX(1, ng)) :: jroot
        end subroutine dlsodar
    end interface
end python module _lsodar
